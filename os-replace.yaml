---
- hosts: cloud
  gather_facts: false
  become: false
  vars:
    platform: "{{ lookup('env', 'PLATFORM') | default('openstack', true) }}"
    test_os: "{{ lookup('env', 'TEST_OS') | default('centos-stream-9', true) }}"
    arch: "{{ lookup('env', 'ARCH') | default('x86_64', true) }}"
    ssh_key_pub: ""
    inventory_file: ""
    download_node: ""
    cloud_profile: "rhos-01"
    images:
      rhel-9-4: RHEL-9.4.0-x86_64-nightly-latest
      centos-stream-9: edge-centos-stream-9
    image_family:
      centos-stream-9: centos-stream-9
    image_project:
      centos-stream-9: centos-cloud
    ami:
      x86_64:
        rhel-9-4: ami-049f8bd9ca71d1059
        centos-stream-9: ami-049f8bd9ca71d1059
      aarch64:
        rhel-9-4: ami-091ac681b3151e9f1
        centos-stream-9: ami-091ac681b3151e9f1
    instance_type:
      x86_64:
        "0": t2.medium
        "1": t3.medium
        "2": t3a.medium
        "3": m4.large

  tasks:
    - set_fact:
        random_num: "{{ 9999 | random(start=1001) }}"
    - set_fact:
        instance_name: "bootc-{{ platform }}-{{ test_os }}-{{ random_num }}"

    - name: Deploy runner on openstack
      block:
        - name: create a new openstack keypair
          openstack.cloud.keypair:
            cloud: "{{ cloud_profile }}"
            state: present
            name: "kp-bootc-{{ random_num }}"
            public_key_file: "{{ ssh_key_pub }}"

        - name: create security group
          openstack.cloud.security_group:
            cloud: "{{ cloud_profile }}"
            name: "sg-bootc-{{ random_num }}"
            state: present
            description: "security group for bootc test on {{ test_os }}"

        - name: set ssh rule for security group
          openstack.cloud.security_group_rule:
            cloud: "{{ cloud_profile }}"
            security_group: "sg-bootc-{{ random_num }}"
            protocol: tcp
            port_range_min: 22
            port_range_max: 22
            remote_ip_prefix: 0.0.0.0/0

        - name: Deploy openstack instance
          openstack.cloud.server:
            cloud: "{{ cloud_profile }}"
            name: "{{ instance_name }}"
            image: "{{ images[test_os] }}"
            flavor: "ci.standard.small"
            network: "shared_net_9"
            key_name: "kp-bootc-{{ random_num }}"
            security_groups: "sg-bootc-{{ random_num }}"
            auto_ip: true
            config_drive: true
            wait: true
            timeout: 600
            userdata: |
              #cloud-config
              packages:
                - python3
                - python3-dnf
          when: "'centos' in test_os"

        - name: Deploy RHEL openstack instance
          openstack.cloud.server:
            cloud: "{{ cloud_profile }}"
            name: "{{ instance_name }}"
            image: "{{ images[test_os] }}"
            flavor: "ci.standard.small"
            network: "shared_net_9"
            key_name: "kp-bootc-{{ random_num }}"
            security_groups: "sg-bootc-{{ random_num }}"
            auto_ip: true
            config_drive: true
            wait: true
            timeout: 600
            userdata: |
              #cloud-config
              yum_repos:
                baseos:
                  name: rhel-baseos
                  baseurl: "http://{{ download_node }}/rhel-9/nightly/RHEL-9/latest-RHEL-9.4.0/compose/BaseOS/x86_64/os/"
                  enabled: true
                  gpgcheck: false
                  sslverify: false
                appstream:
                  name: rhel-appstream
                  baseurl: "http://{{ download_node }}/rhel-9/nightly/RHEL-9/latest-RHEL-9.4.0/compose/AppStream/x86_64/os/"
                  enabled: true
                  gpgcheck: false
                  sslverify: false
              packages:
                - python3
                - python3-dnf
          when: "'rhel' in test_os"

        - name: Makre sure instance is running
          openstack.cloud.server_info:
            cloud: "{{ cloud_profile }}"
            server: "{{ instance_name }}"
          register: instance_status_result
          retries: 20
          until: instance_status_result.servers[0].vm_state == "active" and instance_status_result.servers[0].access_ipv4 != ""

        - set_fact:
            instance_ip: "{{ instance_status_result.servers[0].addresses.shared_net_9[0].addr }}"
          when:
            - instance_status_result is succeeded
      when: platform == "openstack"

    - name: Deploy runner on Google Cloud
      block:
        - name: gcloud/gsutil - authorizing with a service account
          command:
            /usr/bin/gcloud auth activate-service-account \
            --key-file="{{ lookup('env', 'GCP_SERVICE_ACCOUNT_FILE') }}"

        - name: Create gcp key file
          shell: sed "s/ssh-rsa/cloud-user:ssh-rsa/" "{{ ssh_key_pub }}" > "{{ playbook_dir }}/gcp_key"
          when: "'centos' in test_os"

        - set_fact:
            image_args: "--image-family={{ image_family[test_os] }} --image-project={{ image_project[test_os] }}"
          when: "'centos' in test_os"

        - name: Create gcp instance
          command:
            "/usr/bin/gcloud compute instances create {{ instance_name }} \
            --zone=us-central1-a \
            --machine-type=n2-standard-2 \
            --boot-disk-auto-delete \
            --boot-disk-size=80GB \
            --boot-disk-type=pd-ssd \
            --metadata-from-file=ssh-keys={{ playbook_dir }}/gcp_key \
            --metadata=block-project-ssh-keys=TRUE \
            --provisioning-model=SPOT \
            {{ image_args }} \
            --service-account={{ lookup('env', 'GCP_SERVICE_ACCOUNT_NAME') }} \
            --project={{ lookup('env', 'GCP_PROJECT') }} \
            --format=json"
          register: result_instance

        - set_fact:
            instance_ip: "{{ result_instance.stdout | from_json | json_query('[0].networkInterfaces[0].accessConfigs[0].natIP') }}"
      when: platform == "gcp"

    - name: Deploy runner on AWS
      block:
        - name: random number for instance type
          set_fact:
            instance_type_index: "{{ 3 | random(start=0) }}"

        - name: set random instance type
          set_fact:
            random_instance_type: "{{ lookup('env', 'INSTANCE_TYPE') | default(instance_type[arch][instance_type_index], true) }}"

        - name: get all availability zones
          amazon.aws.aws_az_info:
          register: ec2_zones

        - name: create VPC
          amazon.aws.ec2_vpc_net:
            name: "vpc-bootc-test"
            cidr_block: "172.33.0.0/16"
            tags:
              bootc: "bootc-test"
          register: ec2_vpc

        - name: add internet gateway for VPC
          amazon.aws.ec2_vpc_igw:
            vpc_id: "{{ ec2_vpc.vpc.id }}"
            tags:
              bootc: "bootc-test"
          register: ec2_vpc_igw

        - name: "create subnet for VPC in {{ ec2_zones.availability_zones[0] }}"
          amazon.aws.ec2_vpc_subnet:
            vpc_id: "{{ ec2_vpc.vpc.id }}"
            cidr: "172.33.33.0/24"
            az: "{{ ec2_zones.availability_zones[-2].zone_name }}"
            tags:
              bootc: "bootc-test"
          register: ec2_vpc_subnet

        - name: add default route in route table for all vpc subnets
          amazon.aws.ec2_vpc_route_table:
            vpc_id: "{{ ec2_vpc.vpc.id }}"
            subnets:
              - "{{ ec2_vpc_subnet.subnet.id }}"
            routes:
              - dest: 0.0.0.0/0
                gateway_id: "{{ ec2_vpc_igw.gateway_id }}"
            tags:
              bootc: "bootc-test"
          register: ec2_vpc_route_table

        - name: create security group
          amazon.aws.ec2_group:
            vpc_id: "{{ ec2_vpc.vpc.id }}"
            name: "sg-bootc-test"
            description: bootc test security group
            rules:
              - proto: tcp
                ports:
                  - 22
                cidr_ip: 0.0.0.0/0
            tags:
              bootc: "bootc-test"
              name: "bootc-test"
          register: ec2_security_group

        - name: config ssh keypair used by test
          amazon.aws.ec2_key:
            # region: "{{ lookup('env', 'AWS_REGION') }}"
            name: "kp-bootc-{{ random_num }}"
            key_material: "{{ lookup('file', ssh_key_pub) }}"

        - name: generate ec2_run_instance script
          template:
            src: ec2_run_instance.j2
            dest: "{{ playbook_dir }}/ec2_run_instance.sh"
            mode: 0755

        - name: run ec2 instance with script
          command: "{{ playbook_dir }}/ec2_run_instance.sh"
          register: result_instance

        - name: convert run_instance output to json
          set_fact:
            instance_json: "{{ result_instance.stdout | from_json }}"

        - name: wait for instance running
          shell: aws ec2 describe-instances --instance-ids {{ instance_json.Instances[0].InstanceId }} | jq -r '.Reservations[0].Instances[0].State.Name'
          register: describe_result
          retries: 60
          delay: 5
          until: describe_result.stdout == "running"

        - name: get instance public ip
          shell: aws ec2 describe-instances --instance-ids {{ instance_json.Instances[0].InstanceId }} | jq -r '.Reservations[0].Instances[0].PublicIpAddress'
          register: ip_result

        - set_fact:
            instance_ip: "{{ ip_result.stdout }}"

        - name: write AWS EC2 instance id to inventory file
          community.general.ini_file:
            path: "{{ inventory_file }}"
            section: cloud:vars
            option: instance_id
            value: "{{ instance_json.Instances[0].InstanceId }}"
            no_extra_spaces: true
      when: platform == "aws"

    - name: Waits until instance is reachable
      wait_for:
        host: "{{ instance_ip }}"
        port: 22
        search_regex: OpenSSH
        delay: 10
      retries: 30
      register: result_ssh_check
      until: result_ssh_check is success

    - name: Add instance ip into host group guest
      add_host:
        name: "{{ instance_ip }}"
        groups: guest

    - name: Ensure cloud-init has finished
      raw: test -f /var/lib/cloud/instance/boot-finished
      retries: 30
      delay: 20
      register: cloud_init_check
      changed_when: false
      until: cloud_init_check is success
      delegate_to: "{{ instance_ip }}"
      when: platform == "openstack"

    - name: Wait 10 seconds for gcp instance
      wait_for:
        timeout: 10
      delegate_to: localhost
      when: platform == "gcp"

    - name: Write instance ip to inventory file
      community.general.ini_file:
        path: "{{ inventory_file }}"
        section: guest
        option: guest ansible_host
        value: "{{ instance_ip }}"
        no_extra_spaces: true

    - name: Write random number to inventory file
      community.general.ini_file:
        path: "{{ inventory_file }}"
        section: cloud:vars
        option: random_num
        value: "{{ random_num }}"
        no_extra_spaces: true

    - name: Write instance name to inventory file
      community.general.ini_file:
        path: "{{ inventory_file }}"
        section: cloud:vars
        option: instance_name
        value: "{{ instance_name }}"
        no_extra_spaces: true
      when: platform != "aws"

- hosts: guest
  gather_facts: false
  become: false

  tasks:
    - name: Install podman and skopeo
      package:
        name:
          - podman
          - skopeo
        state: present
      become: true

    - name: Auth for RHEL private image
      command:
        podman login \
        -u "{{ lookup('env', 'QUAY_USERNAME') }}" \
        -p "{{ lookup('env', 'QUAY_PASSWORD') }}" \
        quay.io
      become: true

    - name: Install image
      command:
        "podman run \
         --rm \
         --privileged \
         --pid=host \
         -v /:/target \
         --security-opt label=type:unconfined_t \
         {{ test_image_url }} \
         bootc install to-filesystem --replace=alongside /target"
      become: true

    - name: Reboot to deploy new system
      reboot:
      become: true

    - name: Wait for connection to become reachable/usable
      wait_for_connection:
        delay: 30
